{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","action","updateTaskAC","catch","console","warn","clearTodosDataAC","fetchTodolistsTC","todolists","todos","forEach","tl","items","setTasksAC","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","addTask","todolist","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","useSelector","state","useDispatch","auth","useEffect","thunk","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justifyContent","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","handleChange","name","App","finally","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","rootReducer","combineReducers","todoListId","copyState","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.091aed57.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '6f9e9cbc-7a8e-4e53-ac34-b3e563cd5704'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>(`/auth/login`, data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<AuthType>>('/auth/me');\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('/auth/login');\r\n    }\r\n}\r\n\r\nexport type AuthType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import { Dispatch } from 'redux'\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {clearDataActionType, clearTodosDataAC} from \"../TodolistsList/todolists-reducer\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then (res => {\r\n            if (res.data.resultCode === 0) {\r\n                const action = setIsLoggedInAC(true)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(clearTodosDataAC())\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType | clearDataActionType\r\n","import {setIsLoggedInAC} from \"../features/login/auth-reducer\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized:false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.value}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized:boolean\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setIsInitializedAC = (value: boolean) => ({type: 'APP/SET-IS-INITIALIZED',value} as const)\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setIsInitializedAC(true))\r\n        })\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type setIsInitializedType = ReturnType<typeof setIsInitializedAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | setIsInitializedType","import {\r\n    AddTodolistActionType,\r\n    clearDataActionType,\r\n    RemoveTodolistActionType,\r\n    SetTodolistsActionType\r\n} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        case \"CLEAR-DATA\":\r\n            return {}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todolistId,\r\n    taskId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | clearDataActionType\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {fetchTasksTC} from \"./tasks-reducer\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case \"CLEAR-DATA\":\r\n            return []\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\nexport const clearTodosDataAC = () => ({type: 'CLEAR-DATA'} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: any) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                return res.data\r\n            })\r\n            .then((todos) => {\r\n                todos.forEach((tl) => {\r\n                    dispatch(fetchTasksTC(tl.id))\r\n                })\r\n            })\r\n            .catch(() => {\r\n                dispatch(setAppStatusAC('failed'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type clearDataActionType = ReturnType<typeof clearTodosDataAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n    | clearDataActionType\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n/*\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])*/\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType,boolean>(state=> state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if (demo||!isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to = \"/login\"/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport const ErrorSnackbar = () => {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={5000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Navigate} from 'react-router-dom'\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 2) {\r\n                errors.password = 'Invalid password, should be >2 and <16';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            formik.resetForm()\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to=\"/\"/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: samara808@yandex.ru</p>\r\n                    <p>Password: 123456789</p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={\r\n                                <Checkbox onChange={formik.handleChange}\r\n                                          checked={formik.values.rememberMe}\r\n                                          name=\"rememberMe\"\r\n                                />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Login} from \"../features/login/Login\";\r\nimport {Routes, Route, Navigate} from 'react-router-dom'\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {logoutTC} from \"../features/login/auth-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const dispatch = useDispatch()\r\n    const logOutHandler = () => {\r\n        dispatch(logoutTC())\r\n        console.log('push')\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logOutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path=\"/\" element={<TodolistsList/>}/>\r\n                    <Route path=\"/login\" element={<Login/>}/>\r\n                    <Route path=\"/404\" element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Route path=\"*\" element={<Navigate to=\"/404\"/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport {authReducer} from \"../features/login/auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>\n    ,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}